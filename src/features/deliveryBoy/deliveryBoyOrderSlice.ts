// src/features/delivery/deliveryBoySlice.ts
import { createSlice, createAsyncThunk, PayloadAction } from "@reduxjs/toolkit";
import api from "../../../utils/api";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { Order } from "../orders/orderSlice";

// Define the shape of a DeliveryBoy
export interface DeliveryBoy {
Â  _id: string;
Â  name: string;
Â  email: string;
Â  phone: string;
Â  shopName?: string;
Â  shopImage?: string;
Â  businessType?: string;
Â  vehicleNo?: string;
Â  licenseNo?: string;
Â  address: {
Â  Â  latitude?: number;
Â  Â  longitude?: number;
Â  Â  pincode: string;
Â  Â  state: string;
Â  Â  district: string;
Â  Â  country: string;
Â  };
Â  isApproved: boolean;
Â  isAvailable: boolean;
Â  assignedOrders: string[];
}

// Define the shape of the slice state
interface DeliveryBoyState {
Â  deliveryBoy: DeliveryBoy | null;
Â  token: string | null;
Â  loading: boolean;
Â  error: string | null;
Â  allDeliveryBoys: Omit<DeliveryBoy, 'email' | 'password'>[];
Â  assignedOrders: Order[];
}

// Utility function to get the token from AsyncStorage
const getDeliveryBoyToken = async () => {
Â  try {
Â  Â  const token = await AsyncStorage.getItem("deliveryBoyToken");
Â  Â  return token && token !== "null" ? token : null;
Â  } catch (error) {
Â  Â  console.error("Failed to get deliveryBoyToken from AsyncStorage", error);
Â  Â  return null;
Â  }
};

// Async thunk for registration
export const registerDeliveryBoy = createAsyncThunk<
Â  { deliveryBoy: DeliveryBoy; token: string },
Â  FormData,
Â  { rejectValue: string }
>(
Â  "deliveryBoy/registerDeliveryBoy",
Â  async (formData, { rejectWithValue }) => {
Â  Â  try {
Â  Â  Â  const res = await api.post("/deliveryboy/register", formData, {
Â  Â  Â  Â  headers: { "Content-Type": "multipart/form-data" },
Â  Â  Â  });
Â  Â  Â  const token = res.data.token;
Â  Â  Â  await AsyncStorage.setItem("deliveryBoyToken", token);
Â  Â  Â  const profileRes = await api.get("/deliveryboy/profile", {
Â  Â  Â  Â  headers: { Authorization: `Bearer ${token}` },
Â  Â  Â  });
Â  Â  Â  return {
Â  Â  Â  Â  deliveryBoy: profileRes.data.deliveryBoy,
Â  Â  Â  Â  token,
Â  Â  Â  };
Â  Â  } catch (err: any) {
Â  Â  Â  return rejectWithValue(err.response?.data?.message || "Registration failed");
Â  Â  }
Â  }
);

// Async thunk for login
export const loginDeliveryBoy = createAsyncThunk<
Â  { deliveryBoy: DeliveryBoy; token: string },
Â  { email: string; password: string },
Â  { rejectValue: string }
>(
Â  "deliveryBoy/loginDeliveryBoy",
Â  async ({ email, password }, { rejectWithValue }) => {
Â  Â  try {
Â  Â  Â  const res = await api.post("/deliveryboy/login", { email, password });
Â  Â  Â  const token = res.data.token;
Â  Â  Â  await AsyncStorage.setItem("deliveryBoyToken", token);
Â  Â  Â  const profileRes = await api.get("/deliveryboy/profile", {
Â  Â  Â  Â  headers: { Authorization: `Bearer ${token}` },
Â  Â  Â  });
Â  Â  Â  return {
Â  Â  Â  Â  deliveryBoy: profileRes.data.deliveryBoy,
Â  Â  Â  Â  token,
Â  Â  Â  };
Â  Â  } catch (err: any) {
Â  Â  Â  return rejectWithValue(err.response?.data?.message || "Login failed");
Â  Â  }
Â  }
);

// Async thunk for fetching profile
export const fetchDeliveryBoyProfile = createAsyncThunk<
Â  { deliveryBoy: DeliveryBoy; token: string | null },
Â  void,
Â  { rejectValue: string }
>(
Â  "deliveryBoy/fetchProfile",
Â  async (_, { rejectWithValue }) => {
Â  Â  try {
Â  Â  Â  const token = await getDeliveryBoyToken();
Â  Â  Â  if (!token) {
Â  Â  Â  Â  throw new Error("No valid token");
Â  Â  Â  }
Â  Â  Â  const res = await api.get("/deliveryboy/profile", {
Â  Â  Â  Â  headers: { Authorization: `Bearer ${token}` },
Â  Â  Â  });
Â  Â  Â  return {
Â  Â  Â  Â  deliveryBoy: res.data.deliveryBoy,
Â  Â  Â  Â  token,
Â  Â  Â  };
Â  Â  } catch (err: any) {
Â  Â  Â  return rejectWithValue(err.response?.data?.message || "Failed to fetch profile");
Â  Â  }
Â  }
);

// Async thunk for updating profile
export const updateDeliveryBoyProfile = createAsyncThunk<
Â  { deliveryBoy: DeliveryBoy; token: string },
Â  FormData,
Â  { rejectValue: string }
>(
Â  "deliveryBoy/updateProfile",
Â  async (updatedData, { rejectWithValue }) => {
Â  Â  try {
Â  Â  Â  const token = await getDeliveryBoyToken();
Â  Â  Â  if (!token) {
Â  Â  Â  Â  throw new Error("No valid token");
Â  Â  Â  }
Â  Â  Â  const res = await api.put("/deliveryboy/update", updatedData, {
Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  Authorization: `Bearer ${token}`,
Â  Â  Â  Â  Â  "Content-Type": "multipart/form-data",
Â  Â  Â  Â  },
Â  Â  Â  });
Â  Â  Â  return {
Â  Â  Â  Â  deliveryBoy: res.data.deliveryBoy,
Â  Â  Â  Â  token,
Â  Â  Â  };
Â  Â  } catch (err: any) {
Â  Â  Â  return rejectWithValue(err.response?.data?.message || "Update failed");
Â  Â  }
Â  }
);

// Async thunk for fetching all delivery boys
export const fetchAllDeliveryBoys = createAsyncThunk<
Â  Omit<DeliveryBoy, 'email' | 'password'>[],
Â  void,
Â  { rejectValue: string }
>(
Â  "deliveryBoy/fetchAll",
Â  async (_, { rejectWithValue }) => {
Â  Â  try {
Â  Â  Â  const res = await api.get("/deliveryboy/all");
Â  Â  Â  return res.data;
Â  Â  } catch (err: any) {
Â  Â  Â  return rejectWithValue(
Â  Â  Â  Â  err.response?.data?.message || "Failed to fetch delivery boys"
Â  Â  Â  );
Â  Â  }
Â  }
);

// Async thunk for toggling availability
export const toggleAvailability = createAsyncThunk<
Â  boolean,
Â  void,
Â  { rejectValue: string }
>(
Â  "deliveryBoy/toggleAvailability",
Â  async (_, { rejectWithValue }) => {
Â  Â  try {
Â  Â  Â  const token = await getDeliveryBoyToken();
Â  Â  Â  if (!token) {
Â  Â  Â  Â  throw new Error("No valid token");
Â  Â  Â  }
Â  Â  Â  // Corrected: Sending an empty object {} instead of null
Â  Â  Â  const res = await api.patch("/deliveryboy/toggle-availability", {}, {
Â  Â  Â  Â  headers: { Authorization: `Bearer ${token}` },
Â  Â  Â  });
Â  Â  Â  return res.data.isAvailable;
Â  Â  } catch (err: any) {
Â  Â  Â  return rejectWithValue(
Â  Â  Â  Â  err.response?.data?.message || "Failed to toggle availability"
Â  Â  Â  );
Â  Â  }
Â  }
);

// ðŸšš Get orders assigned to a delivery boy
export const fetchOrdersByDeliveryBoy = createAsyncThunk<
Â  Order[], string, { rejectValue: string }
>(
Â  "deliveryBoy/fetchOrdersByDeliveryBoy",
Â  async (deliveryBoyId, { rejectWithValue }) => {
Â  Â  try {
Â  Â  Â  const token = await getDeliveryBoyToken();
Â  Â  Â  if (!token) {
Â  Â  Â  Â  return rejectWithValue("Authentication token not found. Please log in.");
Â  Â  Â  }

Â  Â  Â  const res = await api.get(`/deliveryboy/${deliveryBoyId}/orders`, {
Â  Â  Â  Â  headers: { Authorization: `Bearer ${token}` },
Â  Â  Â  });
Â  Â  Â  return res.data.orders || [];
Â  Â  } catch (err: any) {
Â  Â  Â  console.error("Failed to fetch delivery boy orders:", err);
Â  Â  Â  return rejectWithValue(err.response?.data?.message || err.message || "Failed to fetch delivery boy orders");
Â  Â  }
Â  }
);

// âœ… New: Async thunk to update order status
interface UpdateOrderStatusPayload {
Â  orderId: string;
Â  status: 'picked_up' | 'delivered';
}
export const updateOrderStatus = createAsyncThunk<
Â  Order, UpdateOrderStatusPayload, { rejectValue: string }
>(
Â  "deliveryBoy/updateOrderStatus",
Â  async ({ orderId, status }, { rejectWithValue }) => {
Â  Â  try {
Â  Â  Â  const token = await getDeliveryBoyToken();
Â  Â  Â  if (!token) {
Â  Â  Â  Â  return rejectWithValue("Authentication token not found. Please log in.");
Â  Â  Â  }

Â  Â  Â  // Using a PATCH request to update the status
Â  Â  Â  const res = await api.patch(`/orders/${orderId}/status`, { status }, {
Â  Â  Â  Â  headers: { Authorization: `Bearer ${token}` },
Â  Â  Â  });
Â  Â  Â  return res.data.order;
Â  Â  } catch (err: any) {
Â  Â  Â  console.error(`Failed to update status for order ${orderId}:`, err);
Â  Â  Â  return rejectWithValue(err.response?.data?.message || "Failed to update order status");
Â  Â  }
Â  }
);

const initialState: DeliveryBoyState = {
Â  deliveryBoy: null,
Â  token: null,
Â  loading: false,
Â  error: null,
Â  allDeliveryBoys: [],
Â  assignedOrders: [],
};

const deliveryBoyAuthSlice = createSlice({
Â  name: "deliveryBoyAuth",
Â  initialState,
Â  reducers: {
Â  Â  setDeliveryBoy: (state, action: PayloadAction<{ deliveryBoy: DeliveryBoy; token: string }>) => {
Â  Â  Â  state.deliveryBoy = action.payload.deliveryBoy;
Â  Â  Â  state.token = action.payload.token;
Â  Â  Â  AsyncStorage.setItem("deliveryBoyToken", action.payload.token);
Â  Â  },
Â  Â  logoutDeliveryBoy: (state) => {
Â  Â  Â  state.deliveryBoy = null;
Â  Â  Â  state.token = null;
Â  Â  Â  state.error = null;
Â  Â  Â  AsyncStorage.removeItem("deliveryBoyToken");
Â  Â  },
Â  },
Â  extraReducers: (builder) => {
Â  Â  builder
Â  Â  Â  .addCase(registerDeliveryBoy.pending, (state) => {
Â  Â  Â  Â  state.loading = true;
Â  Â  Â  Â  state.error = null;
Â  Â  Â  })
Â  Â  Â  .addCase(registerDeliveryBoy.fulfilled, (state, action) => {
Â  Â  Â  Â  state.loading = false;
Â  Â  Â  Â  state.deliveryBoy = action.payload.deliveryBoy;
Â  Â  Â  Â  state.token = action.payload.token;
Â  Â  Â  })
Â  Â  Â  .addCase(registerDeliveryBoy.rejected, (state, action) => {
Â  Â  Â  Â  state.loading = false;
Â  Â  Â  Â  state.error = action.payload ?? "Registration failed";
Â  Â  Â  })
Â  Â  Â  .addCase(loginDeliveryBoy.pending, (state) => {
Â  Â  Â  Â  state.loading = true;
Â  Â  Â  Â  state.error = null;
Â  Â  Â  })
Â  Â  Â  .addCase(loginDeliveryBoy.fulfilled, (state, action) => {
Â  Â  Â  Â  state.loading = false;
Â  Â  Â  Â  state.deliveryBoy = action.payload.deliveryBoy;
Â  Â  Â  Â  state.token = action.payload.token;
Â  Â  Â  })
Â  Â  Â  .addCase(loginDeliveryBoy.rejected, (state, action) => {
Â  Â  Â  Â  state.loading = false;
Â  Â  Â  Â  state.error = action.payload ?? "Login failed";
Â  Â  Â  })
Â  Â  Â  .addCase(fetchDeliveryBoyProfile.pending, (state) => {
Â  Â  Â  Â  state.loading = true;
Â  Â  Â  Â  state.error = null;
Â  Â  Â  })
Â  Â  Â  .addCase(fetchDeliveryBoyProfile.fulfilled, (state, action) => {
Â  Â  Â  Â  state.loading = false;
Â  Â  Â  Â  state.deliveryBoy = action.payload.deliveryBoy;
Â  Â  Â  Â  state.token = action.payload.token;
Â  Â  Â  })
Â  Â  Â  .addCase(fetchDeliveryBoyProfile.rejected, (state, action) => {
Â  Â  Â  Â  state.loading = false;
Â  Â  Â  Â  state.deliveryBoy = null;
Â  Â  Â  Â  state.token = null;
Â  Â  Â  Â  state.error = action.payload ?? "Failed to fetch profile";
Â  Â  Â  })
Â  Â  Â  .addCase(updateDeliveryBoyProfile.pending, (state) => {
Â  Â  Â  Â  state.loading = true;
Â  Â  Â  Â  state.error = null;
Â  Â  Â  })
Â  Â  Â  .addCase(updateDeliveryBoyProfile.fulfilled, (state, action) => {
Â  Â  Â  Â  state.loading = false;
Â  Â  Â  Â  state.deliveryBoy = action.payload.deliveryBoy;
Â  Â  Â  Â  state.token = action.payload.token;
Â  Â  Â  })
Â  Â  Â  .addCase(updateDeliveryBoyProfile.rejected, (state, action) => {
Â  Â  Â  Â  state.loading = false;
Â  Â  Â  Â  state.error = action.payload ?? "Update failed";
Â  Â  Â  })
Â  Â  Â  .addCase(fetchAllDeliveryBoys.pending, (state) => {
Â  Â  Â  Â  state.loading = true;
Â  Â  Â  Â  state.error = null;
Â  Â  Â  })
Â  Â  Â  .addCase(fetchAllDeliveryBoys.fulfilled, (state, action) => {
Â  Â  Â  Â  state.loading = false;
Â  Â  Â  Â  state.allDeliveryBoys = action.payload;
Â  Â  Â  })
Â  Â  Â  .addCase(fetchAllDeliveryBoys.rejected, (state, action) => {
Â  Â  Â  Â  state.loading = false;
Â  Â  Â  Â  state.error = action.payload ?? "Failed to fetch all delivery boys";
Â  Â  Â  })
Â  Â  Â  .addCase(toggleAvailability.pending, (state) => {
Â  Â  Â  Â  state.loading = true;
Â  Â  Â  Â  state.error = null;
Â  Â  Â  })
Â  Â  Â  .addCase(toggleAvailability.fulfilled, (state, action) => {
Â  Â  Â  Â  state.loading = false;
Â  Â  Â  Â  if (state.deliveryBoy) {
Â  Â  Â  Â  Â  state.deliveryBoy.isAvailable = action.payload;
Â  Â  Â  Â  }
Â  Â  Â  })
Â  Â  Â  .addCase(toggleAvailability.rejected, (state, action) => {
Â  Â  Â  Â  state.loading = false;
Â  Â  Â  Â  state.error = action.payload ?? "Failed to toggle availability";
Â  Â  Â  })
Â  Â  Â  .addCase(fetchOrdersByDeliveryBoy.pending, (state) => {
Â  Â  Â  Â  state.loading = true;
Â  Â  Â  Â  state.error = null;
Â  Â  Â  })
Â  Â  Â  .addCase(fetchOrdersByDeliveryBoy.fulfilled, (state, action) => {
Â  Â  Â  Â  state.loading = false;
Â  Â  Â  Â  state.assignedOrders = action.payload;
Â  Â  Â  })
Â  Â  Â  .addCase(fetchOrdersByDeliveryBoy.rejected, (state, action) => {
Â  Â  Â  Â  state.loading = false;
Â  Â  Â  Â  state.error = action.payload ?? "Failed to fetch assigned orders";
Â  Â  Â  })
Â  Â  Â  // New: Add a case for updating order status
Â  Â  Â  .addCase(updateOrderStatus.pending, (state) => {
Â  Â  Â  Â  state.loading = true;
Â  Â  Â  Â  state.error = null;
Â  Â  Â  })
Â  Â  Â  .addCase(updateOrderStatus.fulfilled, (state, action: PayloadAction<Order>) => {
Â  Â  Â  Â  state.loading = false;
Â  Â  Â  Â  const updatedOrder = action.payload;
Â  Â  Â  Â  // Update the specific order in the assignedOrders array
Â  Â  Â  Â  const index = state.assignedOrders.findIndex(o => o._id === updatedOrder._id);
Â  Â  Â  Â  if (index !== -1) {
Â  Â  Â  Â  Â  state.assignedOrders[index] = updatedOrder;
Â  Â  Â  Â  }
Â  Â  Â  })
Â  Â  Â  .addCase(updateOrderStatus.rejected, (state, action: PayloadAction<string | undefined>) => {
Â  Â  Â  Â  state.loading = false;
Â  Â  Â  Â  state.error = action.payload ?? "Failed to update order status";
Â  Â  Â  });
Â  },
});

export const { setDeliveryBoy, logoutDeliveryBoy } = deliveryBoyAuthSlice.actions;
export default deliveryBoyAuthSlice.reducer;
